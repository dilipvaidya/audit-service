version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - audit-net

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - audit-net

  elasticsearch:
    image: elasticsearch:7.6.2
    container_name: elasticsearch762
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audit-net

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Console UI
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audit-net

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9002:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - audit-net

  audit-service:
    build:
      context: . # src/main/java
      dockerfile: Dockerfile
    container_name: audit-service
    ports:
      - "8080:8080"
    environment:
      - MINIO_BUCKET=dev-s3-bucket
    depends_on:
      - kafka
      - minio
      - elasticsearch
    networks:
      - audit-net

  kafka-seed:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - kafka
    volumes:
      - ./:/kafka-seed
    entrypoint: [ "/bin/bash", "-c" ]
    command: >
      "
      /bin/bash -c '
        echo Waiting for Kafka to be ready...;
        sleep 15;
        kafka-console-producer --broker-list kafka:9092 --topic audit-events < /kafka-seed/audit-event-samples.json
      '
      "
    restart: "no"  # Do not restart once finished
    networks:
      - audit-net

volumes:
  minio-data:

networks:
  audit-net:
    driver: bridge

# docker exec -it <your-kafka-container-name> bash
# kafka-console-producer --broker-list localhost:9092 --topic audit-events